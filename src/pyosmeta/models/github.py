"""
Models for Github API requests autogenerated from JSON schema,
and then deduplicated and trimmed for just specifying what we use here.

eg. given the Issue schema at https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#get-an-issue
Using `datamodel-code-generator` ( https://docs.pydantic.dev/latest/integrations/datamodel_code_generator/ )

```
datamodel-codegen --input issue_schema.json --input-file-type jsonschema --output issue_models.py
```
"""

# generated by datamodel-codegen:
#   filename:  issue_schema.json
#   timestamp: 2024-07-02T23:19:14+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Literal, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, model_validator


class User(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: Optional[str] = Field(None, examples=["MDQ6VXNlcjE="])
    avatar_url: Optional[AnyUrl] = Field(
        None, examples=["https://github.com/images/error/octocat_happy.gif"]
    )
    gravatar_id: Optional[str] = Field(
        None, examples=["41d064eb2195891e12d0413f63227ea7"]
    )
    url: Optional[AnyUrl] = Field(
        None, examples=["https://api.github.com/users/octocat"]
    )
    html_url: Optional[AnyUrl] = Field(
        None, examples=["https://github.com/octocat"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool = False
    starred_at: Optional[str] = Field(
        None, examples=['"2020-07-09T00:17:55Z"']
    )

    model_config = ConfigDict(extra="allow")


class Assignee(User): ...


class Creator(User): ...


class ClosedBy(User): ...


class Owner(User): ...


class LabelType(str, Enum):
    """Enum for the different types of labels that can be assigned to an issue.

    This enum is not meant to be exhaustive, but rather capture a few important
    labels for life cycle of approved reviews.

    For now, this only includes the "archived" label, which is used to mark
    packages that are no longer maintained ("inactive"). The "archived" label
    corresponds to setting ``active=False`` on the ReviewModel
    """

    ARCHIVED = "archived"


class Labels(BaseModel):
    name: str
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[AnyUrl] = None
    description: Optional[str] = None
    color: Optional[str] = None
    default: Optional[bool] = None
    type: Optional[LabelType] = None

    @model_validator(mode="before")
    def parse_label_type(cls, data):
        """Parse the label type from the name before validation.

        This will parse the label name into an available LabelType enum value.
        Not all labels will have a corresponding LabelType, so this will
        gracefully fail. This was implemented for assigning the LabelType.ARCHIVED
        value to the "archived" label so that we can easily filter out archived
        issues.
        """
        try:
            data["type"] = LabelType(data["name"])
        except ValueError:
            pass
        return data


class Issue(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: AnyUrl = Field(
        ...,
        description="URL for the issue",
        examples=["https://api.github.com/repositories/42/issues/1"],
    )
    repository_url: AnyUrl
    labels_url: Optional[AnyUrl] = None
    comments_url: Optional[AnyUrl] = None
    events_url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    number: int = Field(
        ...,
        description="Number uniquely identifying the issue within its repository",
        examples=[42],
    )
    state: Optional[Literal["open", "closed"]] = Field(
        None,
        description="State of the issue; either 'open' or 'closed'",
        examples=["open"],
    )
    title: str = Field(
        ...,
        description="Title of the issue",
        examples=["Widget creation fails in Safari on OS X 10.8"],
    )
    body: Optional[str] = Field(
        None,
        description="Contents of the issue",
        examples=[
            "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
        ],
    )
    user: Optional[User] = None
    labels: List[Union[str, Labels]] = Field(
        default_factory=list,
        description="Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository",
        examples=["bug", "registration"],
    )
    assignee: Optional[Assignee] = None
    assignees: Optional[List[Assignee]] = None
    locked: bool = False
    comments: int
    closed_at: Optional[datetime] = None
    created_at: datetime
    updated_at: datetime
    draft: Optional[bool] = None
    closed_by: Optional[ClosedBy] = None
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    reactions: Optional[Any] = Field(None, title="Reaction Rollup")

    model_config = ConfigDict(extra="allow")
